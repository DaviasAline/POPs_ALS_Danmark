---
title: "Aline's work"
format: html
editor: visual
toc: true
toc_depth: 4
theme:
  light: flatly
  dark: darkly
toc-location: left
---

```{r}
#| message: false
#| warning: false
#| include: false
source("~/Documents/POP_ALS_2025_02_03/1_codes/2_analyses_fattyacids_ALS.R")
```


# Danish data description

## Metadata

Not imputed for missing data

```{r}
#| echo: false
#| message: false
#| warning: false
descrip_covar_danish |>
  as_gt() |>
  gt::tab_options(table.font.size = "small")
```

## POPs 

### Distribution tables

```{r}
#| echo: false
#| message: false
#| warning: false
table_1 <- descrip_num(data = bdd_danish, vars = c(POPs, POPs_group))
table_1 <- left_join(table_1, bdd_danish_loq, by = "variable") |>
  mutate(
    variable = fct_recode(variable, 
    "PCB-118,138,153,180" = "PCB_4",  
    "Dioxin-like PCBs" = "PCB_DL", 
    "Non dioxin-like PCBs" = "PCB_NDL", 
    "HCB" = "OCP_HCB",
    "Oxychlordane" = "OCP_oxychlordane",
    "PeCB" = "OCP_PeCB",
    "p,p'-DDE" = "OCP_pp_DDE",
    "p,p'-DDT" = "OCP_pp_DDT",
    "Transnonachlor" = "OCP_transnonachlor",
    "α_HCH" = "OCP_α_HCH",
    "β_HCH" = "OCP_β_HCH",
    "γ_HCH" = "OCP_γ_HCH"), 
    variable = gsub("_", "-", variable), 
    variable = fct_relevel(
      variable, 
      "PCB-118,138,153,180",  "Dioxin-like PCBs", "PCB-118", "PCB-156", 
         "Non dioxin-like PCBs", "PCB-28", "PCB-52", "PCB-74", "PCB-99", "PCB-101", 
         "PCB-138", "PCB-153", "PCB-170", "PCB-180", "PCB-183", "PCB-187", 
         "HCB", "ΣDDT", "p,p'-DDT",  "p,p'-DDE",  
         "α-HCH", "β-HCH", "γ-HCH", 
         "Σchlordane", "Oxychlordane", "Transnonachlor", 
         "PeCB",   
         "ΣPBDE", "PBDE-47", "PBDE-99", "PBDE-153")) |>
  arrange(variable)
table_1 %>% kable("html")

# descrip_num(data = bdd_danish, vars = c(POPs_group, POPs_group_outlier)) %>% kable("html")
```



### Comparison of distribution cases/controls

```{r}
#| echo: false
#| message: false
#| warning: false
bdd_danish |>
  select(als, all_of(POPs), all_of(POPs_group)) |>
    mutate(
    als = as.character(als), 
    als = fct_recode(als, "Controls" = "0", "Cases" = "1"), 
    als = fct_relevel(als, "Cases", "Controls")) |>
  select(als, 
         "PCB_4",  "PCB_DL", "PCB_118", "PCB_156", 
         "PCB_NDL", "PCB_28", "PCB_52", "PCB_74", "PCB_99", "PCB_101", 
         "PCB_138", "PCB_153", "PCB_170", "PCB_180", "PCB_183", "PCB_187", 
         "OCP_HCB",  
         "ΣDDT", "OCP_pp_DDT",  "OCP_pp_DDE",  
         "OCP_α_HCH", "OCP_β_HCH", "OCP_γ_HCH", 
         "Σchlordane", "OCP_oxychlordane", "OCP_transnonachlor", 
         "OCP_PeCB",   
         "ΣPBDE", "PBDE_47", "PBDE_99", "PBDE_153") |>
  tbl_summary(by = als, 
              digits = all_continuous() ~1) |>
  bold_labels() |>
  add_overall() |>
  add_p() |>
  as_gt() |>
  gt::tab_options(table.font.size = "small")
```

### Heatmap of correlation 
```{r fig.height=10, fig.width=10}
#| echo: false
#| message: false
#| warning: false
heatmap_POPs <- bdd_danish %>% 
  select(all_of(POPs), all_of(POPs_group)) |>
  rename(
    "Transnonachlor" = "OCP_transnonachlor", 
    "Oxychlordane" = "OCP_oxychlordane", 
    "Dioxin-like PCBs" = PCB_DL,
    "Non-dioxin-like PCBs" = PCB_NDL, 
    "p,p’-DDT"  = OCP_pp_DDT, 
    "p,p’-DDE" = OCP_pp_DDE) |>
  rename_with(~ gsub("OCP_", "", .x)) |>  
  rename_with(~ gsub("_", "-", .x)) |>  
  select(
    "Dioxin-like PCBs", "PCB-118", "PCB-156", "Non-dioxin-like PCBs", "PCB-28", "PCB-52",
    "PCB-74", "PCB-99", "PCB-101", "PCB-138", "PCB-153", "PCB-170",
    "PCB-180", "PCB-183", "PCB-187", "HCB", "ΣDDT", "p,p’-DDE",
    "p,p’-DDT",  "β-HCH",  "Σchlordane", "Transnonachlor",
    "Oxychlordane", "ΣPBDE", "PBDE-47", "PBDE-99", "PBDE-153")

heatmap_POPs <- cor(heatmap_POPs, 
                 use = "pairwise.complete.obs", 
                 method = "pearson")

corrplot(heatmap_POPs, 
         method = 'color', 
         type = "lower", 
         tl.col = 'black', 
         tl.srt = 45, 
         addCoef.col = "black",
         number.cex = 0.8,
         number.digits = 1,
         tl.cex = 1,
         col = rev(COL2(diverging = "RdYlBu")))

```


### Boxplots

```{r, fig.width=10, fig.height=10}
#| echo: false
#| message: false
#| warning: false
# descrip_expo_danish
descrip_expo_danish_by_als
```

### Detailed distribution 
#### Summed 

```{r}
#| echo: false
#| message: false
#| warning: false
densityplot(data = bdd_danish, vars = POPs_group)
boxplot(data = bdd_danish, vars = POPs_group)
heatmap_cor(cormat = bdd_danish[POPs_group], decimal = 1)
```

#### PCBs

```{r}
#| echo: false
#| message: false
#| warning: false
PCBs <- bdd_danish |> select(all_of(POPs)) |> select(contains("PCB")) |> colnames()
densityplot(data = bdd_danish, vars = PCBs[1:9])
```

```{r, fig.height=3.33}
#| echo: false
#| message: false
#| warning: false
densityplot(data = bdd_danish, vars = PCBs[10:13])
```

```{r}
#| echo: false
#| message: false
#| warning: false
boxplot(data = bdd_danish, vars = PCBs[1:10])
```

```{r, fig.height=2}
#| echo: false
#| message: false
#| warning: false
boxplot(data = bdd_danish, vars = PCBs[11:13])
```

```{r}
#| echo: false
#| message: false
#| warning: false
heatmap_cor(cormat = bdd_danish[PCBs], decimal = 1)
rm(PCBs)
```

#### OCPs

```{r}
#| echo: false
#| message: false
#| warning: false
OCPs <- bdd_danish |> select(all_of(POPs)) |> select(contains("OCP")) |> colnames()
densityplot(data = bdd_danish, vars = OCPs)
boxplot(data = bdd_danish, vars = OCPs)
heatmap_cor(cormat = bdd_danish[OCPs], decimal = 1)
```

#### PBDEs

```{r,  fig.width=7, fig.height=3}
#| echo: false
#| message: false
#| warning: false
PBDEs <- bdd_danish |> select(all_of(POPs)) |> select(contains("PBDE")) |> colnames()
densityplot(data = bdd_danish, vars = PBDEs)
boxplot(data = bdd_danish, vars = PBDEs)
```

```{r,  fig.width=7, fig.height=4}
#| echo: false
#| message: false
#| warning: false
heatmap_cor(cormat = bdd_danish[PBDEs], decimal = 1)
```

## Fatty acids 
### Distribution tables 
```{r, fig.height=10, fig.width=10}
#| echo: false
#| message: false
#| warning: false
descrip_num(data = bdd_danish, vars = fattyacids) |> 
  mutate(variable = fct_recode(variable, !!!fatty_acid_labels)) |>
    kable("html")
```

### Comparison of distribution cases/controls

```{r}
#| echo: false
#| message: false
#| warning: false
bdd_danish |>
  select(als, all_of(explanatory), all_of(fattyacids)) |>
    mutate(
    als = as.character(als), 
    als = fct_recode(als, "Controls" = "0", "Cases" = "1"), 
    als = fct_relevel(als, "Cases", "Controls")) |>
  tbl_summary(by = als, 
              digits = all_continuous() ~1) |>
  bold_labels() |>
  add_overall() |>
  add_p() |>
  as_gt() |>
  gt::tab_options(table.font.size = "small")
```

### Heatmap of correlation
```{r, fig.height=12, fig.width=12}
#| echo: false
#| message: false
#| warning: false
heatmap_fattyacids <- bdd_danish |> select(all_of(explanatory), all_of(fattyacids)) |>
  rename(!!!fatty_acid_labels)
heatmap_fattyacids <- cor(heatmap_fattyacids, 
                    use = "pairwise.complete.obs", 
                    method = "pearson")
corrplot(heatmap_fattyacids, 
         method = 'color', 
         type = "lower", 
         tl.col = 'black', 
         tl.srt = 45, 
         addCoef.col = "black",
         number.cex = 0.8,
         number.digits = 1,
         tl.cex = 1,
         col = rev(COL2(diverging = "RdYlBu")))
heatmap_cor_pairwise(fattyacids, POPs, decimal = 1, data = bdd_danish)
```



### Boxplots
```{r, fig.height=10, fig.width=10}
#| echo: false
#| message: false
#| warning: false
# descrip_fattyacids_danish
descrip_fattyacids_danish_by_als
```

### Detailed distribution
#### Density plots 
```{r, fig.height=10, fig.width=10}
#| echo: false
#| message: false
#| warning: false
bdd_danish |> 
  select(sample,all_of(explanatory),  all_of(fattyacids)) |>
  pivot_longer(cols = -sample, names_to = "fattyacids", values_to = "values") |>
  mutate(fattyacids = fct_recode(fattyacids, !!!fatty_acid_labels)) |>
  ggplot() +
  aes(x = values) +
  geom_density(fill = "#112446") +
  theme_minimal() +
  facet_wrap(~fattyacids, scales = "free", ncol = 4)
```

## Multiple cholesterol variables
```{r}
#| echo: false
#| message: false
#| warning: false
boxplot(data = bdd_danish, vars = c("fS_Kol", "cholesterol"))
descrip_num(data = bdd_danish, vars = c("fS_Kol", "cholesterol")) |> kable("html")
cor.test(bdd_danish$fS_Kol, bdd_danish$cholesterol)
```


# Finnish data description 
## Metadata 
```{r}
#| echo: false
#| message: false
#| warning: false
descrip_covar_finnish  |>
  as_gt() |>
  gt::tab_options(table.font.size = "small")
```

## POPs

### Distribution tables

```{r}
#| echo: false
#| message: false
#| warning: false
table_1 <- bdd |> filter(!study %in% "Danish") 
descrip_num(data = table_1, vars = POPs) |> 
  mutate(
    variable = fct_recode(variable, 
    "PCB-118,138,153,180" = "PCB_4",  
    "Dioxin-like PCBs" = "PCB_DL", 
    "Non dioxin-like PCBs" = "PCB_NDL", 
    "HCB" = "OCP_HCB",
    "Oxychlordane" = "OCP_oxychlordane",
    "PeCB" = "OCP_PeCB",
    "p,p'-DDE" = "OCP_pp_DDE",
    "p,p'-DDT" = "OCP_pp_DDT",
    "Transnonachlor" = "OCP_transnonachlor",
    "α_HCH" = "OCP_α_HCH",
    "β_HCH" = "OCP_β_HCH",
    "γ_HCH" = "OCP_γ_HCH"), 
    variable = gsub("_", "-", variable), 
    variable = fct_relevel(
      variable, 
      "PCB-118,138,153,180",  "Dioxin-like PCBs", "PCB-118", "PCB-156", 
         "Non dioxin-like PCBs", "PCB-28", "PCB-52", "PCB-74", "PCB-99", "PCB-101", 
         "PCB-138", "PCB-153", "PCB-170", "PCB-180", "PCB-183", "PCB-187", 
         "HCB", "ΣDDT", "p,p'-DDT",  "p,p'-DDE",  
         "α-HCH", "β-HCH", "γ-HCH", 
         "Σchlordane", "Oxychlordane", "Transnonachlor", 
         "PeCB",   
         "ΣPBDE", "PBDE-47", "PBDE-99", "PBDE-153")) |>
  arrange(variable) |>
  kable("html")
rm(table_1)

# descrip_num(data = bdd_finnish, vars = c(POPs_group, POPs_group_outlier)) |> kable("html")
```


### Comparison of distribution cases/controls

```{r}
#| echo: false
#| message: false
#| warning: false
bdd |>
  filter(!study %in% c("Danish")) |>
  select(als, all_of(POPs), all_of(POPs_group)) |>
    mutate(
    als = as.character(als), 
    als = fct_recode(als, "Controls" = "0", "Cases" = "1"), 
    als = fct_relevel(als, "Cases", "Controls")) |>
  select(als, 
         "PCB_4",  "PCB_DL", "PCB_118", "PCB_156", 
         "PCB_NDL", "PCB_28", "PCB_52", "PCB_74", "PCB_99", "PCB_101", 
         "PCB_138", "PCB_153", "PCB_170", "PCB_180", "PCB_183", "PCB_187", 
         "OCP_HCB",  
         "ΣDDT", "OCP_pp_DDT",  "OCP_pp_DDE",  
         "OCP_α_HCH", "OCP_β_HCH", "OCP_γ_HCH", 
         "Σchlordane", "OCP_oxychlordane", "OCP_transnonachlor", 
         "OCP_PeCB",   
         "ΣPBDE", "PBDE_47", "PBDE_99", "PBDE_153") |>
  tbl_summary(by = als, 
              digits = all_continuous() ~1) |>
  bold_labels() |>
  add_overall() |>
  add_p() |>
  as_gt() |>
  gt::tab_options(table.font.size = "small")
```

### Heatmap of correlation 
```{r fig.height=10, fig.width=10}
#| echo: false
#| message: false
#| warning: false

heatmap_POPs <- bdd |>
  filter(!study %in% c("Danish")) |>
  select(all_of(POPs), all_of(POPs_group)) |>
  rename(
    "Dioxin-like PCBs" = PCB_DL,
    "Non-dioxin-like PCBs" = PCB_NDL, 
    "p,p’-DDT"  = OCP_pp_DDT, 
    "p,p’-DDE" = OCP_pp_DDE) |>
  rename_with(~ gsub("OCP_", "", .x)) |>  
  rename_with(~ gsub("_", "-", .x)) |>  
  select(
    "Dioxin-like PCBs", "PCB-118", "PCB-156", "Non-dioxin-like PCBs", "PCB-28", "PCB-52",
    "PCB-74", "PCB-99", "PCB-101", "PCB-138", "PCB-153", "PCB-170",
    "PCB-180", "PCB-183", "PCB-187", "HCB", "ΣDDT", "p,p’-DDE",
    "p,p’-DDT",  "β-HCH",  "Σchlordane", "transnonachlor",
    "oxychlordane", "ΣPBDE", "PBDE-47", "PBDE-99", "PBDE-153")

heatmap_POPs <- cor(heatmap_POPs, 
                 use = "pairwise.complete.obs", 
                 method = "pearson")

corrplot(heatmap_POPs, 
         method = 'color', 
         type = "lower", 
         tl.col = 'black', 
         tl.srt = 45, 
         addCoef.col = "black",
         number.cex = 0.8,
         number.digits = 1,
         tl.cex = 1,
         col = rev(COL2(diverging = "RdYlBu")))

```

### Boxplots

```{r, fig.width=10, fig.height=10}
#| echo: false
#| message: false
#| warning: false
# descrip_expo_finnish
descrip_expo_finnish_by_als
```

### Detailed distribution
#### Summed 

```{r}
#| echo: false
#| message: false
#| warning: false
densityplot(data = bdd_finnish, vars = POPs_group)
boxplot(data = bdd_finnish, vars = POPs_group)
heatmap_cor(cormat = bdd_finnish[POPs_group], decimal = 1)
```

#### PCBs

```{r}
#| echo: false
#| message: false
#| warning: false
PCBs <- bdd_finnish |> select(all_of(POPs_finnish)) |> select(contains("PCB")) |> colnames()
densityplot(data = bdd_finnish, vars = PCBs[1:9])
```

```{r, fig.height=3.33}
#| echo: false
#| message: false
#| warning: false
densityplot(data = bdd_finnish, vars = PCBs[10:13])
```

```{r}
#| echo: false
#| message: false
#| warning: false
boxplot(data = bdd_finnish, vars = PCBs[1:10])
```

```{r, fig.height=2}
#| echo: false
#| message: false
#| warning: false
boxplot(data = bdd_finnish, vars = PCBs[11:13])
```

```{r}
#| echo: false
#| message: false
#| warning: false
heatmap_cor(cormat = bdd_finnish[PCBs], decimal = 1)
rm(PCBs)
```

#### OCPs

```{r}
#| echo: false
#| message: false
#| warning: false
OCPs <- bdd_finnish |> select(all_of(POPs_finnish)) |> select(contains("OCP")) |> colnames()
densityplot(data = bdd_finnish, vars = OCPs)
boxplot(data = bdd_finnish, vars = OCPs)
# heatmap_cor(cormat = bdd_finnish[OCPs], decimal = 1)
```

#### PBDEs

```{r,  fig.width=7, fig.height=3}
#| echo: false
#| message: false
#| warning: false
PBDEs <- bdd_finnish |> select(all_of(POPs_finnish)) |> select(contains("PBDE")) |> colnames()
densityplot(data = bdd_finnish, vars = PBDEs)
boxplot(data = bdd_finnish, vars = PBDEs)
```

```{r,  fig.width=7, fig.height=4}
#| echo: false
#| message: false
#| warning: false
heatmap_cor(cormat = bdd_finnish[PBDEs], decimal = 1)
```


## Fatty acids
### Distribution tables 
```{r, fig.height=10, fig.width=10}
#| echo: false
#| message: false
#| warning: false
descrip_num(data = bdd_finnish, vars = fattyacids) |> 
  mutate(variable = fct_recode(variable, !!!fatty_acid_labels)) |>
  kable("html")
```

### Comparison of distribution cases/controls
```{r}
#| echo: false
#| message: false
#| warning: false
bdd_finnish |>
  select(als, all_of(explanatory), all_of(fattyacids)) |>
    mutate(
    als = as.character(als), 
    als = fct_recode(als, "Controls" = "0", "Cases" = "1"), 
    als = fct_relevel(als, "Cases", "Controls")) |>
  tbl_summary(by = als, 
              digits = all_continuous() ~1) |>
  bold_labels() |>
  add_overall() |>
  add_p() |>
  as_gt() |>
  gt::tab_options(table.font.size = "small")
```

### Heatmap of correlation
```{r, fig.height=12, fig.width=12}
#| echo: false
#| message: false
#| warning: false
heatmap_fattyacids <- bdd_finnish |> 
  select(all_of(explanatory), all_of(fattyacids)) |>
  rename(!!!fatty_acid_labels) 
heatmap_fattyacids <- cor(heatmap_fattyacids, 
                    use = "pairwise.complete.obs", 
                    method = "pearson")

corrplot(heatmap_fattyacids, 
         method = 'color', 
         type = "lower", 
         tl.col = 'black', 
         tl.srt = 45, 
         addCoef.col = "black",
         number.cex = 0.8,
         number.digits = 1,
         tl.cex = 1,
         col = rev(COL2(diverging = "RdYlBu")))

heatmap_cor_pairwise(fattyacids, POPs_finnish, decimal = 1, data = bdd_finnish)
```

### Boxplots
```{r, fig.height=10, fig.width=10}
#| echo: false
#| message: false
#| warning: false
# descrip_fattyacids_finnish
descrip_fattyacids_finnish_by_als
```

### Detailed distribution 
```{r, fig.height=10, fig.width=10}
#| echo: false
#| message: false
#| warning: false

bdd_finnish |> 
  select(sample, all_of(explanatory),  all_of(fattyacids)) |>
  pivot_longer(cols = -sample, names_to = "fattyacids", values_to = "values") |>
    mutate(fattyacids = fct_recode(fattyacids, !!!fatty_acid_labels)) |>
  ggplot() +
  aes(x = "", y = values) +
  geom_boxplot(shape = "circle", fill = "#112446") +
  coord_flip() +
  theme_bw() +
  theme(axis.title = element_blank()) +
  facet_wrap(~fattyacids, scales = "free", ncol = 3L, nrow = 14L)
```


## Multiple cholesterol variables issue
Why do we have 3 cholesterol variables in the finnish data ?
```{r}
#| echo: false
#| message: false
#| warning: false
boxplot(data = bdd_finnish, vars = c("fS_Kol", "chol", "cholesterol"))
descrip_num(data = bdd_finnish, vars = c("fS_Kol", "chol", "cholesterol")) |> kable("html")
heatmap_cholesterol <- bdd_finnish |> select("fS_Kol", "chol", "cholesterol")
heatmap_cholesterol <- cor(heatmap_cholesterol, 
                    use = "pairwise.complete.obs", 
                    method = "pearson")

corrplot(heatmap_cholesterol, 
         method = 'color', 
         type = "lower", 
         tl.col = 'black', 
         tl.srt = 45, 
         addCoef.col = "black",
         number.cex = 0.8,
         number.digits = 1,
         tl.cex = 1,
         col = rev(COL2(diverging = "RdYlBu")))

```



# Comparison danish/finnish data
## Metadata
```{r}
#| echo: false
#| message: false
#| warning: false
bdd %>%
  select("study", "sex", "marital_status", "smoking", "alcohol", "education", 
         "bmi", "cholesterol", "blod_sys", "blod_dias", "baseline_age", "diagnosis_age") %>%
  tbl_summary(by = "study") %>%
  bold_labels() %>%
  add_p()|>
  as_gt() |>
  gt::tab_options(table.font.size = "small")
```

## POPs 
```{r, fig.width=10, fig.height=10}
#| echo: false
#| message: false
#| warning: false
bdd |>
  select(study, all_of(POPs), all_of(POPs_group)) |>
  pivot_longer(cols = -study, names_to = "POPs", values_to = "values") |>
    mutate(
    POPs = fct_recode(POPs, 
                      "PCB-118,138,153,180" = "PCB_4", 
                      "Dioxin-like PCBs" = "PCB_DL",
                      "Non-dioxin-like PCBs" = "PCB_NDL", 
                      "p,p’-DDT"  = "OCP_pp_DDT", 
                      "p,p’-DDE" = "OCP_pp_DDE", 
                      "Oxychlordane" = "OCP_oxychlordane", 
                      "Transnonachlor" = "OCP_transnonachlor"), 
    POPs = gsub("OCP_", "", POPs), 
    POPs = gsub("_", "-", POPs), 
    POPs = fct_relevel(POPs, 
                       "PCB-118,138,153,180", 
                       "Dioxin-like PCBs", "PCB-118", "PCB-156",
                       "Non-dioxin-like PCBs",  "PCB-28",  "PCB-52", "PCB-74", "PCB-99", 
                       "PCB-101",   "PCB-138", "PCB-153", "PCB-170", "PCB-180", "PCB-183", "PCB-187", 
                       "HCB","ΣDDT","p,p’-DDT", "p,p’-DDE", 
                       "α-HCH", "β-HCH", "γ-HCH", 
                       "Σchlordane", "Oxychlordane", "Transnonachlor", 
                       "PeCB",   "ΣPBDE", "PBDE-47","PBDE-99","PBDE-153"), 
    POPs = fct_rev(POPs)) |>
  ggplot() +
  aes(x = POPs, y = values, fill = study) +
  geom_boxplot() +
  scale_fill_hue(direction = 1, 
                 guide = guide_legend(reverse = TRUE)) +
  scale_y_continuous(trans = "log", 
                     labels = number_format(accuracy = 1)) +
  labs(x = "POPs", y = "Values (pg/ml, log transformed)", fill = "Study") +
  coord_flip() +
  theme_lucid()

# bdd |>
#   select(study, all_of(POPs), all_of(POPs_group)) |>
#   pivot_longer(cols = -study, names_to = "POPs", values_to = "values") |>
#     mutate(
#     POPs =   fct_relevel(POPs, 
#     "PCB_DL", "PCB_118", "PCB_156", "PCB_NDL", "PCB_4", "PCB_28",
#     "PCB_52", "PCB_74", "PCB_99", "PCB_101", "PCB_138", "PCB_153",
#     "PCB_170", "PCB_180", "PCB_183", "PCB_187", "OCP_HCB", "OCP_PeCB",
#     "ΣDDT", "OCP_pp_DDE", "OCP_pp_DDT", "Σchlordane", "OCP_oxychlordane",
#     "OCP_transnonachlor", "OCP_α_HCH", "OCP_β_HCH", "OCP_γ_HCH",
#     "ΣPBDE", "PBDE_47", "PBDE_99", "PBDE_153"), 
#     POPs = fct_rev(POPs)) |>
#   filter(POPs %in% c("OCP_HCB", "PCB_4", "PCB_DL", "PCB_NDL", "OCP_PeCB", "OCP_β_HCH", "Σchlordane", "ΣDDT", "ΣHCH", "ΣPBDE")) |>
#   ggplot() +
#   aes(x = POPs, y = values, fill = study) +
#   geom_boxplot() +
#   scale_fill_hue(direction = 1) +
#   scale_y_continuous(trans = "log", 
#                      labels = number_format(accuracy = 1)) +
#   labs(x = "POPs", y = "Values (pg/ml, log transformed)", fill = "Study") +
#   coord_flip() +
#   theme_lucid() + 
#   scale_fill_discrete()  

```

## Fatty acids
```{r, fig.height=12, fig.width=12}
#| echo: false
#| message: false
#| warning: false
bdd |>
  select(study, all_of(explanatory), all_of(fattyacids)) |>
  pivot_longer(cols = -study, names_to = "fattyacids", values_to = "values") |>
  mutate(fattyacids = fct_recode(fattyacids, !!!fatty_acid_labels)) |>
  ggplot() +
  aes(x = fattyacids, y = values, fill = study) +
  geom_boxplot() +
  scale_fill_hue(direction = 1, 
                 guide = guide_legend(reverse = TRUE)) +
  scale_y_continuous(trans = "log", 
                     labels = number_format(accuracy = 1)) +
  labs(x = "Fatty acids", y = "Values (log transformed)", fill = "Cohort") +
  coord_flip() +
  theme_lucid()

bdd |>
  filter(als == 0) |>
  select(study, all_of(fattyacids), all_of(explanatory)) |>
  tbl_summary(by = "study") |>
  bold_labels() |>
  add_n() |>
  as_gt() |>
  gt::tab_options(table.font.size = "small")
```

# POPs and ALS (in Danish cohort) 

## Effects of covariates on ALS diagnosis

```{r}
#| echo: false
#| message: false
#| warning: false
covar |>
  as_gt() |>
  gt::tab_options(table.font.size = "small")
```

## Effects of POPs on ALS occurence

### Spline transformation

#### main analysis

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
results_spline |> 
  rename('OR' = 'OR_base', '95% CI' = '95%CI_base', 'p-value' = 'p.value_base',
         'OR ' = 'OR_adjusted', '95% CI ' = '95%CI_adjusted', 'p-value ' = 'p.value_adjusted',
         ' OR ' = 'OR_copollutant', ' 95% CI ' = '95%CI_copollutant', ' p-value ' = 'p.value_copollutant') |>
  kable("html", escape = FALSE, align = "c") |>
  add_header_above(c(" " = 1, " " = 1, "Base model" = 3, "Adjusted model" = 3, "Copollutant model" = 3)) |>
  column_spec(1:2, bold = TRUE, background = "#f0f0f0")  |>
  scroll_box(width = "100%", height = "800px", extra_css = "scrollable-table") |>
  kable_styling(fixed_thead = TRUE)
```

#### sensitivity analysis without outliers

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
results_spline_outliers |> 
  rename('OR' = 'OR_base', '95% CI' = '95%CI_base', 'p-value' = 'p.value_base',
         'OR ' = 'OR_adjusted', '95% CI ' = '95%CI_adjusted', 'p-value ' = 'p.value_adjusted'
         # ,
         # ' OR ' = 'OR_copollutant', ' 95% CI ' = '95%CI_copollutant', ' p-value ' = 'p.value_copollutant'
         ) |>
  kable("html", escape = FALSE, align = "c") |>
  add_header_above(c(" " = 1, " " = 1, "Base model" = 3, "Adjusted model" = 3
                     # , 
                     # "Copollutant model" = 3
                     )) |>
  column_spec(1:2, bold = TRUE, background = "#f0f0f0")  |>
  scroll_box(width = "100%", height = "800px", extra_css = "scrollable-table") |>
  kable_styling(fixed_thead = TRUE)
```

### Quartile transformation

#### main analysis

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
results_quart |> 
    rename('OR' = 'OR_base', '95% CI' = '95%CI_base', 'p-value' = 'p.value_base',
         'OR ' = 'OR_adjusted', '95% CI ' = '95%CI_adjusted', 'p-value ' = 'p.value_adjusted',
         ' OR ' = 'OR_copollutant', ' 95% CI ' = '95%CI_copollutant', ' p-value ' = 'p.value_copollutant') |>
  kable("html", escape = FALSE, align = "c") |>
  add_header_above(c(" " = 1, " " = 1, "Base model" = 3, "Adjusted model" = 3, "Copollutant model" = 3)) |>
  column_spec(1:2, bold = TRUE, background = "#f0f0f0")  |>
  scroll_box(width = "100%", height = "800px", extra_css = "scrollable-table") |>
  kable_styling(fixed_thead = TRUE)
```

### Quadratic transformation

#### main analysis

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
results_quadratic |>
    rename('OR' = 'OR_base', '95% CI' = '95%CI_base', 'p-value' = 'p.value_base',
         'OR ' = 'OR_adjusted', '95% CI ' = '95%CI_adjusted', 'p-value ' = 'p.value_adjusted', 
         ' OR ' = 'OR_copollutant', ' 95% CI ' = '95%CI_copollutant', ' p-value ' = 'p.value_copollutant'
         ) |>
  kable("html", escape = FALSE, align = "c") |>
  add_header_above(c(" " = 1, " " = 1, "Base model" = 3, "Adjusted model" = 3, "Copollutant model" = 3)) |>
  column_spec(1:2, bold = TRUE, background = "#f0f0f0")  |>
  scroll_box(width = "100%", height = "800px", extra_css = "scrollable-table")|>
  kable_styling(fixed_thead = TRUE)
```

#### sensitivity analysis without outliers

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
results_quadratic_outliers |>
    rename('OR' = 'OR_base', '95% CI' = '95%CI_base', 'p-value' = 'p.value_base',
         'OR ' = 'OR_adjusted', '95% CI ' = '95%CI_adjusted', 'p-value ' = 'p.value_adjusted'
         # ,
         # ' OR ' = 'OR_copollutant', ' 95% CI ' = '95%CI_copollutant', ' p-value ' = 'p.value_copollutant'
         ) |>
  kable("html", escape = FALSE, align = "c") |>
  add_header_above(c(" " = 1, " " = 1, "Base model" = 3, "Adjusted model" = 3
                     # , "Copollutant model" = 3
                     )) |>
  column_spec(1:2, bold = TRUE, background = "#f0f0f0")  |>
  scroll_box(width = "100%", height = "800px", extra_css = "scrollable-table")|>
  kable_styling(fixed_thead = TRUE)
```

### Cubic transformation

#### main analysis

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
results_cubic |>
    rename('OR' = 'OR_base', '95% CI' = '95%CI_base', 'p-value' = 'p.value_base',
         'OR ' = 'OR_adjusted', '95% CI ' = '95%CI_adjusted', 'p-value ' = 'p.value_adjusted',
         ' OR ' = 'OR_copollutant', ' 95% CI ' = '95%CI_copollutant', ' p-value ' = 'p.value_copollutant') |>
  kable("html", escape = FALSE, align = "c") |>
  add_header_above(c(" " = 1, " " = 1, "Base model" = 3, "Adjusted model" = 3, "Copollutant model" = 3)) |>
  column_spec(1:2, bold = TRUE, background = "#f0f0f0")  |>
  scroll_box(width = "100%", height = "800px", extra_css = "scrollable-table")|>
  kable_styling(fixed_thead = TRUE)
```

#### sensitivity analysis without outliers

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
results_cubic_outliers |>
    rename('OR' = 'OR_base', '95% CI' = '95%CI_base', 'p-value' = 'p.value_base',
         'OR ' = 'OR_adjusted', '95% CI ' = '95%CI_adjusted', 'p-value ' = 'p.value_adjusted'
         # ,
         # ' OR ' = 'OR_copollutant', ' 95% CI ' = '95%CI_copollutant', ' p-value ' = 'p.value_copollutant'
         ) |>
  kable("html", escape = FALSE, align = "c") |>
  add_header_above(c(" " = 1, " " = 1, "Base model" = 3, "Adjusted model" = 3
                     # , "Copollutant model" = 3
                     )) |>
  column_spec(1:2, bold = TRUE, background = "#f0f0f0")  |>
  scroll_box(width = "100%", height = "800px", extra_css = "scrollable-table")|>
  kable_styling(fixed_thead = TRUE)
```

## Vizualization

### model comparison splines, linear quadratic and cubic

#### dioxin like PCBs

```{r, fig.width=15, fig.height=3}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
grid.arrange(grobs = list(plot_adjusted_spline$PCB_DL, 
                       plot_adjusted_spline_outlier$PCB_DL, 
                       plot_adjusted_quadratic$PCB_DL, 
                       plot_adjusted_quadratic_outlier$PCB_DL, 
                       plot_adjusted_cubic$PCB_DL, 
                       plot_adjusted_cubic_outlier$PCB_DL), ncol = 6)
```

#### non dioxin like PCBs

```{r, fig.width=15, fig.height=3}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
grid.arrange(grobs = list(plot_adjusted_spline$PCB_NDL, 
                       plot_adjusted_spline_outlier$PCB_NDL, 
                       plot_adjusted_quadratic$PCB_NDL,
                       plot_adjusted_quadratic_outlier$PCB_NDL, 
                       plot_adjusted_cubic$PCB_NDL,
                       plot_adjusted_cubic_outlier$PCB_NDL), ncol = 6)
```

#### 4 most commun PCBs

```{r, fig.width=15, fig.height=3}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
grid.arrange(grobs = list(plot_adjusted_spline$PCB_4, 
                       plot_adjusted_spline_outlier$PCB_4,
                       plot_adjusted_quadratic$PCB_4, 
                       plot_adjusted_quadratic_outlier$PCB_4, 
                       plot_adjusted_cubic$PCB_4, 
                       plot_adjusted_cubic_outlier$PCB_4), ncol = 6)
```

#### OCP_HCB

```{r, fig.width=15, fig.height=3}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
grid.arrange(grobs = list(plot_adjusted_spline$OCP_HCB, 
                       plot_adjusted_spline_outlier$OCP_HCB,
                       plot_adjusted_quadratic$OCP_HCB, 
                       plot_adjusted_quadratic_outlier$OCP_HCB, 
                       plot_adjusted_cubic$OCP_HCB, 
                       plot_adjusted_cubic_outlier$OCP_HCB), ncol = 6)
```

#### ΣDDT

```{r, fig.width=15, fig.height=3}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
grid.arrange(grobs = list(plot_adjusted_spline$ΣDDT, 
                       plot_adjusted_spline_outlier$ΣDDT,
                       plot_adjusted_quadratic$ΣDDT, 
                       plot_adjusted_quadratic_outlier$ΣDDT, 
                       plot_adjusted_cubic$ΣDDT, 
                       plot_adjusted_cubic_outlier$ΣDDT), ncol = 6)
```

#### OCP_β_HCH

```{r, fig.width=15, fig.height=3}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
grid.arrange(grobs = list(plot_adjusted_spline$OCP_β_HCH, 
                       plot_adjusted_spline_outlier$OCP_β_HCH,
                       plot_adjusted_quadratic$OCP_β_HCH, 
                       plot_adjusted_quadratic_outlier$OCP_β_HCH, 
                       plot_adjusted_cubic$OCP_β_HCH, 
                       plot_adjusted_cubic_outlier$OCP_β_HCH), ncol = 6)
```

#### Σchlordane

```{r, fig.width=15, fig.height=3}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
grid.arrange(grobs = list(plot_adjusted_spline$Σchlordane, 
                       plot_adjusted_spline_outlier$Σchlordane,
                       plot_adjusted_quadratic$Σchlordane, 
                       plot_adjusted_quadratic_outlier$Σchlordane, 
                       plot_adjusted_cubic$Σchlordane, 
                       plot_adjusted_cubic_outlier$Σchlordane), ncol = 6)
```

#### ΣPBDE

```{r, fig.width=15, fig.height=3}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
grid.arrange(grobs = list(plot_adjusted_spline$ΣPBDE, 
                       plot_adjusted_spline_outlier$ΣPBDE,
                       plot_adjusted_quadratic$ΣPBDE, 
                       plot_adjusted_quadratic_outlier$ΣPBDE, 
                       plot_adjusted_cubic$ΣPBDE, 
                       plot_adjusted_cubic_outlier$ΣPBDE), ncol = 6)
```

### forest plot quartiles

```{r fig.height=9, fig.width=9}
#| echo: false
#| message: false
#| warning: false
plot_quart
```

```{r fig.height=9, fig.width=9}
#| echo: false
#| message: false
#| warning: false
plot_quart_bis
```

### gamm models

#### Base models

Relationship between POPs exposure at baseline time and ALS occurrence estimated using a generalized additive mixed model (GAMM) from the Danish Diet, Cancer and Health study cohort established between December 1993 and May 1997. The solid blue line represents the predicted ALS occurrence by POPs exposure given that all other covariates are at their respective means. The light blue represents the 95% confidence intervals. Analyses were adjusted for sex and age. The effective degrees of freedom (EDF) for the POPs smooth terms is a summary statistic of a GAMM that reflects the degree of nonlinearity (edf=1: linear, edf=2: quadratic, edf\>2: more complex than quadratic).

```{r, fig.height=6, fig.width=15}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
wrap_plots(wrap_plots(plot_adjusted_gamm[1:4], nrow = 1), 
           wrap_plots(plot_adjusted_gamm_outlier[1:4], nrow = 1), 
           nrow = 2)
wrap_plots(wrap_plots(plot_adjusted_gamm[5:8], nrow = 1), 
           wrap_plots(plot_adjusted_gamm_outlier[5:8], nrow = 1), 
           nrow = 2)
```

#### Adjusted models

Relationship between POPs exposure at baseline time and ALS occurrence estimated using a generalized additive mixed model (GAMM) from the Danish Diet, Cancer and Health study cohort established between December 1993 and May 1997. The solid blue line represents the predicted ALS occurrence by POPs exposure given that all other covariates are at their respective means. The light blue represents the 95% confidence intervals. Analyses were adjusted for sex, age, serum cholesterol, BMI, smoking status, marital status and education. The effective degrees of freedom (EDF) for the POPs smooth terms is a summary statistic of a GAMM that reflects the degree of nonlinearity (edf=1: linear, edf=2: quadratic, edf\>2: more complex than quadratic).

```{r, fig.height=6, fig.width=15}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
wrap_plots(wrap_plots(plot_adjusted_gamm[1:4], nrow = 1), 
           wrap_plots(plot_adjusted_gamm_outlier[1:4], nrow = 1), 
           nrow = 2)
wrap_plots(wrap_plots(plot_adjusted_gamm[5:8], nrow = 1), 
           wrap_plots(plot_adjusted_gamm_outlier[5:8], nrow = 1), 
           nrow = 2)
```

#### Copollutant model

Relationship between POPs exposure at baseline time and ALS occurrence estimated using a generalized additive mixed model (GAMM) from the Danish Diet, Cancer and Health study cohort established between December 1993 and May 1997. The solid blue line represents the predicted ALS occurrence by POPs exposure given that all other covariates and all other co-pollutants are at their respective means. The light blue represents the 95% confidence intervals. Analyses were adjusted for sex, age, serum cholesterol, BMI, smoking status, marital status, education and for the other co-pollutants. The effective degrees of freedom (EDF) for the POPs smooth terms is a summary statistic of a GAMM that reflects the degree of nonlinearity (edf=1: linear, edf=2: quadratic, edf\>2: more complex than quadratic).

```{r, fig.height=6, fig.width=15}
#| echo: false
#| message: false
#| warning: false
#| column: screen-inset-right
wrap_plots(wrap_plots(plot_copollutant_gamm[1:4], nrow = 1), 
           wrap_plots(plot_copollutant_gamm_outlier[1:4], nrow = 1), 
           nrow = 2)
wrap_plots(wrap_plots(plot_copollutant_gamm[5:7], nrow = 1), 
           wrap_plots(plot_copollutant_gamm_outlier[5:7], nrow = 1), 
           nrow = 2)
```


## Sensitivity analysis pollutants not summed
### GAMMs 
```{r, fig.height=6, fig.width=15}
#| column: screen-inset-right
#| echo: false
#| message: false
#| warning: false
wrap_plots(plot_adjusted_gamm_not_summed[1:8], ncol = 4)
wrap_plots(plot_adjusted_gamm_not_summed[9:16], ncol = 4)
wrap_plots(plot_adjusted_gamm_not_summed[17:22], ncol = 4)
```

### Quartiles 
```{r,  fig.height=15, fig.width=10}
#| echo: false
#| message: false
#| warning: false
plot_quart_sensi_not_summed
```

# Fatty acids and ALS 
## Effects of subject characterist on ALS occurence in the Danish cohort 
```{r}
#| echo: false
#| message: false
#| warning: false
table_2 
```

## Effects of fatty acids on ALS occurence in the Danish cohort 
```{r}
#| echo: false
#| message: false
#| warning: false
table_3 |>
set_table_properties(width = 1, layout = "autofit")
```

```{r}
#| echo: false
#| message: false
#| warning: false
figure_2
```
